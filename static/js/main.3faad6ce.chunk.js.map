{"version":3,"sources":["selectors/index.ts","utils/index.ts","components/Banner.tsx","slices/nominationsSlice.ts","components/Nominations.tsx","api/omdbApi.ts","slices/SearchSlice.ts","components/Header.tsx","components/Pagination.tsx","components/SearchResults.tsx","App.tsx","slices/index.ts","index.tsx"],"names":["getNominations","state","nominations","getSearchedResults","searchResults","getStoredNominations","previousNominations","previousIds","localStore","window","localStorage","i","length","id","key","nomination","getItem","push","JSON","parse","Banner","movies","useSelector","Object","values","role","data-banner","createSlice","name","initialState","reducers","deleteNomination","payload","filteredIds","filter","otherMovies","addNomination","imdbID","actions","Nominations","dispatch","useDispatch","liveRegion","useRef","aria-label","className","map","movie","Title","Year","slice","type","onClick","removeItem","current","aria-hidden","aria-live","searchMovies","movieTitle","page","a","process","requestURL","axios","get","data","Search","totalResults","search","searchedInput","loading","error","setSearchedInput","searchMoviesStart","searchMoviesSuccess","forEach","searchMoviesFailure","fetchMovies","message","Header","useState","searchInput","setSearchInput","debouncedInput","useCallback","debounce","nextValue","xmlns","height","width","d","fill","htmlFor","placeholder","value","onChange","event","target","Pagination","setPage","previousInput","setPreviousInput","useEffect","totalPages","Math","floor","Number","hasNextPage","hasPrevPage","disabled","SearchResults","sectionHeading","nominatedMovie","setItem","stringify","handleNominate","includes","data-nominated","App","rootReducer","combineReducers","nominationsReducer","searchReducer","store","configureStore","reducer","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.3faad6ce.chunk.js","sourcesContent":["import { RootState } from \"../slices\";\r\n\r\n//Nominations Selectors\r\nexport const getNominations = (state: RootState) => state.nominations;\r\n\r\n//Search Results Selectors\r\nexport const getSearchedResults = (state: RootState) => state.searchResults;\r\n","import { Movie } from \"../types\";\r\n\r\nexport const getStoredNominations = () => {\r\n  const previousNominations: Array<Movie> = [];\r\n  const previousIds: Array<string> = [];\r\n\r\n  const localStore = window.localStorage;\r\n\r\n  for (let i = 0; i <= localStore.length - 1; i++) {\r\n    let id = \"\";\r\n\r\n    if (localStore.length !== 0) {\r\n      id = localStore.key(i) as string;\r\n    }\r\n\r\n    let nomination = localStore.getItem(id);\r\n\r\n    if (nomination) {\r\n      previousIds.push(id);\r\n      previousNominations.push(JSON.parse(nomination));\r\n    }\r\n  }\r\n\r\n  return { previousNominations, previousIds };\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getNominations } from \"../selectors\";\r\nimport { getStoredNominations } from \"../utils\";\r\n\r\nexport const Banner: React.FC = () => {\r\n  const { movies } = useSelector(getNominations);\r\n\r\n  const { previousNominations } = getStoredNominations(); //Get previously stored nominations\r\n\r\n  //Use either previously stored nominations or new ones\r\n  const nominations =\r\n    previousNominations.length !== 0\r\n      ? previousNominations\r\n      : Object.values(movies);\r\n\r\n  return (\r\n    <div\r\n      role=\"banner\"\r\n      data-banner={nominations.length === 5 ? \"open\" : \"closed\"}\r\n    >\r\n      <p>All done! You have successfully made your five nominations</p>\r\n    </div>\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Nominations, Movie } from \"../types\";\r\n\r\nexport const initialState: Nominations = {\r\n  id: [],\r\n  movies: {},\r\n};\r\n\r\nconst nominations = createSlice({\r\n  name: \"nominations\",\r\n  initialState,\r\n  reducers: {\r\n    deleteNomination(state, { payload }: PayloadAction<string>) {\r\n      const filteredIds = state.id.filter((id) => id !== payload);\r\n      state.id = filteredIds;\r\n\r\n      const { [payload]: selectedItem, ...otherMovies } = state.movies;\r\n      state.movies = otherMovies;\r\n    },\r\n    addNomination(state, { payload }: PayloadAction<Movie>) {\r\n      state.id.push(payload.imdbID);\r\n\r\n      state.movies[payload.imdbID] = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { deleteNomination, addNomination } = nominations.actions;\r\n\r\nexport default nominations.reducer;\r\n","import React, { useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getNominations } from \"../selectors\";\r\nimport { deleteNomination } from \"../slices/nominationsSlice\";\r\nimport { Movie } from \"../types\";\r\nimport { getStoredNominations } from \"../utils\";\r\n\r\nexport const Nominations: React.FC = () => {\r\n  const { movies } = useSelector(getNominations);\r\n\r\n  const { previousNominations } = getStoredNominations(); //Get previously stored nominations\r\n\r\n  //Use either previously stored nominations or new ones\r\n  const nominations =\r\n    previousNominations.length !== 0\r\n      ? previousNominations\r\n      : Object.values(movies);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const liveRegion = useRef<string>(\"\"); //For accessiblity - used to store changes to live region\r\n\r\n  const handleRemove = (id: string) => {\r\n    dispatch(deleteNomination(id));\r\n\r\n    window.localStorage.removeItem(id); //Remove nomination to local storage\r\n\r\n    liveRegion.current = `removed ${\r\n      previousNominations[previousNominations.length - 1].Title\r\n    } from nominations`; //Store nominations to be announced\r\n  };\r\n\r\n  return (\r\n    <aside aria-label=\"nominations\">\r\n      {nominations.length !== 0 && <h2>Nominations</h2>}\r\n\r\n      <div className=\"empty-state\">\r\n        <p>\r\n          <strong>Your nominations appear here.</strong> <br />\r\n          <span>Nominations are saved even after leaving the browser</span>\r\n        </p>\r\n      </div>\r\n\r\n      <ul>\r\n        {nominations.map((movie: Movie) => (\r\n          <li key={movie.imdbID}>\r\n            <p className=\"text\">\r\n              {movie.Title} ({movie.Year.slice(0, 4)})\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              aria-label={`Delete ${movie.Title}`}\r\n              onClick={() => handleRemove(movie.imdbID)}\r\n            >\r\n              <span aria-hidden=\"true\">Remove</span>\r\n              <span className=\"vh\">Remove {`${movie.Title}`}</span>\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <div role=\"status\" aria-live=\"polite\" className=\"vh\">\r\n        {liveRegion.current}\r\n      </div>\r\n    </aside>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const searchMovies = async (movieTitle: string, page: number) => {\r\n  const apikey = process.env.REACT_APP_API_KEY;\r\n\r\n  const requestURL = `https://www.omdbapi.com/?s=${movieTitle}&page=${page}&apikey=${apikey}`;\r\n\r\n  try {\r\n    const searchResults = await axios.get(requestURL);\r\n\r\n    const { Search, totalResults } = searchResults.data;\r\n\r\n    return { Search, totalResults };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { searchMovies } from \"../api/omdbApi\";\r\nimport { Search, Movie, AppThunk } from \"../types\";\r\n\r\nexport const initialState: Search = {\r\n  totalResults: \"\",\r\n  searchedInput: \"\",\r\n  id: [],\r\n  movies: {},\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst search = createSlice({\r\n  name: \"search\",\r\n  initialState,\r\n  reducers: {\r\n    setSearchedInput(state, { payload }: PayloadAction<string>) {\r\n      state.searchedInput = payload;\r\n    },\r\n\r\n    searchMoviesStart(state) {\r\n      //Clear previous search results\r\n      state.id = [];\r\n      state.movies = {};\r\n      state.loading = true;\r\n      state.error = null;\r\n    },\r\n\r\n    searchMoviesSuccess(\r\n      state,\r\n      { payload }: PayloadAction<{ Search: Array<Movie>; totalResults: string }>\r\n    ) {\r\n      payload.Search.forEach((movie) => {\r\n        const { imdbID } = movie;\r\n\r\n        state.id.push(imdbID);\r\n        state.movies[imdbID] = movie;\r\n      });\r\n\r\n      state.totalResults = payload.totalResults;\r\n\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n\r\n    searchMoviesFailure(state, { payload }: PayloadAction<string>) {\r\n      state.error = payload;\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  searchMoviesStart,\r\n  searchMoviesSuccess,\r\n  searchMoviesFailure,\r\n  setSearchedInput,\r\n} = search.actions;\r\n\r\nexport default search.reducer;\r\n\r\n//Redux Thunk\r\nexport const fetchMovies = (\r\n  movieTitle: string,\r\n  page: number = 1\r\n): AppThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(searchMoviesStart());\r\n\r\n    const movies = await searchMovies(movieTitle, page);\r\n\r\n    dispatch(searchMoviesSuccess(movies));\r\n  } catch (error) {\r\n    dispatch(searchMoviesFailure(error.message));\r\n  }\r\n};\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport debounce from \"lodash.debounce\";\r\n\r\nimport { fetchMovies, setSearchedInput } from \"../slices/SearchSlice\";\r\n\r\nexport const Header: React.FC = () => {\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const debouncedInput = useCallback(\r\n    debounce((nextValue) => {\r\n      dispatch(fetchMovies(nextValue)); //Make API request after 500ms\r\n      dispatch(setSearchedInput(nextValue));\r\n    }, 500),\r\n    [] //Function will be created only once (initial render)\r\n  );\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = event.target.value;\r\n\r\n    setSearchInput(value);\r\n    debouncedInput(value);\r\n  };\r\n\r\n  return (\r\n    <header className=\"headerContainer\">\r\n      <h1>Shoppies</h1>\r\n\r\n      <div className=\"searchInput\">\r\n        <i aria-hidden=\"true\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\">\r\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n            <path d=\"M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"></path>\r\n          </svg>\r\n        </i>\r\n\r\n        <label htmlFor=\"search\" className=\"vh\">\r\n          Enter the title of a movie to search\r\n        </label>\r\n\r\n        <input\r\n          type=\"text\"\r\n          id=\"search\"\r\n          placeholder=\"Enter movie title\"\r\n          value={searchInput}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getSearchedResults } from \"../selectors\";\r\nimport { fetchMovies } from \"../slices/SearchSlice\";\r\n\r\nexport const Pagination: React.FC = () => {\r\n  const { totalResults, searchedInput, error, loading } = useSelector(\r\n    getSearchedResults\r\n  );\r\n\r\n  const [page, setPage] = useState(2);\r\n  const [previousInput, setPreviousInput] = useState(searchedInput);\r\n\r\n  useEffect(() => {\r\n    setPage(2);\r\n    setPreviousInput(searchedInput);\r\n  }, [searchedInput]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const totalPages = Math.floor(Number(totalResults) / 10);\r\n\r\n  const hasNextPage = page <= totalPages;\r\n  const hasPrevPage = page > 2;\r\n\r\n  const handleNext = () => {\r\n    if (!loading) {\r\n      setPage((page) => page + 1);\r\n      dispatch(fetchMovies(previousInput, page));\r\n    }\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    if (!loading) {\r\n      setPage((page) => page - 1);\r\n      dispatch(fetchMovies(previousInput, page - 2));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {searchedInput && !error && (\r\n        <div className=\"pagination\">\r\n          <h3>\r\n            Page {page - 1} of {totalPages < 1 ? 1 : totalPages}\r\n          </h3>\r\n          <button\r\n            type=\"button\"\r\n            onClick={handlePrev}\r\n            aria-label=\"Previous Page\"\r\n            disabled={!hasPrevPage}\r\n          >\r\n            Prev\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleNext}\r\n            aria-label=\"Next Page\"\r\n            disabled={!hasNextPage}\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getSearchedResults, getNominations } from \"../selectors\";\r\nimport { Movie } from \"../types\";\r\nimport { addNomination } from \"../slices/nominationsSlice\";\r\nimport { getStoredNominations } from \"../utils\";\r\nimport { Pagination } from \"./Pagination\";\r\n\r\nexport const SearchResults: React.FC = () => {\r\n  const searchResults = useSelector(getSearchedResults);\r\n\r\n  const { movies, loading, searchedInput, error } = searchResults;\r\n\r\n  const { id } = useSelector(getNominations);\r\n\r\n  const { previousNominations, previousIds } = getStoredNominations(); //Get data of previously stored nominations\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const liveRegion = useRef<string>(\"\"); //For accessiblity - used to store changes to live region\r\n\r\n  const handleNominate = (nomination: string) => {\r\n    const nominatedMovie = movies[nomination];\r\n\r\n    if (previousNominations.length < 5) {\r\n      dispatch(addNomination(nominatedMovie));\r\n\r\n      window.localStorage.setItem(nomination, JSON.stringify(nominatedMovie)); //Save nomination to local storage\r\n\r\n      liveRegion.current = `nominated ${nominatedMovie.Title}`; //Store nominations to be announced\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section aria-label=\"Search Results\">\r\n      {searchedInput && (\r\n        <h2>{sectionHeading(loading, error, searchedInput)}</h2>\r\n      )}\r\n\r\n      <div className=\"empty-state\">\r\n        <p>\r\n          Search for a movie to nominate using the search bar. <br />\r\n          <strong>\r\n            Your search results appear here <span aria-hidden=\"true\">↓</span>\r\n          </strong>\r\n        </p>\r\n      </div>\r\n\r\n      <ul>\r\n        {Object.values(movies).map((movie: Movie) => (\r\n          <>\r\n            {searchedInput && (\r\n              <li key={movie.imdbID}>\r\n                <p className=\"text\">\r\n                  {movie.Title} ({movie.Year.slice(0, 4)})\r\n                </p>\r\n                <button\r\n                  type=\"button\"\r\n                  aria-label={`Nominate ${movie.Title}`}\r\n                  onClick={() => handleNominate(movie.imdbID)}\r\n                  disabled={id.includes(movie.imdbID)}\r\n                  data-nominated={previousIds.includes(movie.imdbID)}\r\n                >\r\n                  <span aria-hidden=\"true\">\r\n                    {previousIds.includes(movie.imdbID)\r\n                      ? \"Nominated\"\r\n                      : \"Nominate\"}\r\n                  </span>\r\n                  <span className=\"vh\">Nominate {`${movie.Title}`}</span>\r\n                </button>\r\n              </li>\r\n            )}\r\n          </>\r\n        ))}\r\n      </ul>\r\n\r\n      <Pagination />\r\n\r\n      <div role=\"status\" aria-live=\"polite\" className=\"vh\">\r\n        {liveRegion.current}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst sectionHeading = (\r\n  loading: boolean,\r\n  error: string | null,\r\n  searchedInput: string\r\n) => {\r\n  if (loading) {\r\n    return \"Loading...\";\r\n  }\r\n\r\n  if (error && error !== \"Network Error\" && searchedInput) {\r\n    return \"Are you sure this movie exists?\";\r\n  }\r\n\r\n  if (error === \"Network Error\" && searchedInput) {\r\n    return \"Something went wrong\";\r\n  }\r\n\r\n  if (!searchedInput) {\r\n    return null;\r\n  }\r\n\r\n  return `Search Results for \"${searchedInput}\"`;\r\n};\r\n","import React from \"react\";\r\nimport { Banner } from \"./components/Banner\";\r\nimport { Nominations } from \"./components/Nominations\";\r\nimport { Header } from \"./components/Header\";\r\nimport { SearchResults } from \"./components/SearchResults\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n\r\n      <main>\r\n        <Banner />\r\n        <div className=\"content\">\r\n          <SearchResults />\r\n          <Nominations />\r\n        </div>\r\n      </main>\r\n\r\n      <footer>{/*<p>Made with love by Chris</p>*/}</footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport nominationsReducer from \"./nominationsSlice\";\r\nimport searchReducer from \"./SearchSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  nominations: nominationsReducer,\r\n  searchResults: searchReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport * from \"./nominationsSlice\";\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"./slices\";\r\nimport \"./index.css\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}