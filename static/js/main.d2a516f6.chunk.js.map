{"version":3,"sources":["selectors/index.ts","utils/index.ts","components/Banner.tsx","slices/nominationsSlice.ts","components/Nominations.tsx","api/omdbApi.ts","slices/SearchSlice.ts","components/Header.tsx","components/Pagination.tsx","components/Modal.tsx","components/SearchResults.tsx","App.tsx","slices/index.ts","index.tsx"],"names":["getNominations","state","nominations","getSearchedResults","searchResults","getStoredNominations","previousNominations","previousIds","localStore","window","localStorage","i","length","id","key","nomination","getItem","push","JSON","parse","Banner","movies","useSelector","Object","values","role","data-banner","createSlice","name","initialState","reducers","deleteNomination","payload","filteredIds","filter","otherMovies","addNomination","imdbID","actions","Nominations","liveRegion","useDispatch","useRef","aria-label","className","map","movie","aria-live","current","apikey","process","searchMovies","movieTitle","page","a","requestURL","axios","get","data","Search","totalResults","getMovieDetails","movieId","response","search","searchedInput","loading","error","setSearchedInput","searchMoviesStart","searchMoviesSuccess","forEach","searchMoviesFailure","setMovieDetails","Detail","fetchMovies","dispatch","message","Header","useState","searchInput","setSearchInput","debouncedInput","useCallback","debounce","nextValue","aria-hidden","xmlns","height","width","d","fill","htmlFor","type","placeholder","value","onChange","event","target","Pagination","setPage","previousInput","setPreviousInput","useEffect","totalPages","Math","floor","Number","hasNextPage","hasPrevPage","onClick","disabled","Modal","handleModal","selectedMovie","data-modal","tabIndex","ModalText","Actors","imdbRating","Genre","Poster","Plot","Title","Year","Released","src","alt","SearchResults","showModal","setShowModal","document","querySelector","setAttribute","removeAttribute","handleMovieDetails","details","fetchMovieDetails","data-loading","sectionHeading","slice","version","viewBox","fillRule","strokeWidth","cx","cy","rx","ry","nominatedMovie","setItem","stringify","handleNominate","data-nominated","includes","App","rootReducer","combineReducers","nominationsReducer","searchReducer","store","configureStore","reducer","render","StrictMode"],"mappings":"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","file":"static/js/main.d2a516f6.chunk.js","sourcesContent":["import { RootState } from \"../slices\";\r\n\r\n//Nominations Selectors\r\nexport const getNominations = (state: RootState) => state.nominations;\r\n\r\n//Search Results Selectors\r\nexport const getSearchedResults = (state: RootState) => state.searchResults;\r\n","import { Movie } from \"../types\";\r\n\r\nexport const getStoredNominations = () => {\r\n  const previousNominations: Array<Movie> = [];\r\n  const previousIds: Array<string> = [];\r\n\r\n  const localStore = window.localStorage;\r\n\r\n  for (let i = 0; i <= localStore.length - 1; i++) {\r\n    let id = \"\";\r\n\r\n    if (localStore.length !== 0) {\r\n      id = localStore.key(i) as string;\r\n    }\r\n\r\n    let nomination = localStore.getItem(id);\r\n\r\n    if (nomination) {\r\n      previousIds.push(id);\r\n      previousNominations.push(JSON.parse(nomination));\r\n    }\r\n  }\r\n\r\n  return { previousNominations, previousIds };\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getNominations } from \"../selectors\";\r\nimport { getStoredNominations } from \"../utils\";\r\n\r\nexport const Banner: React.FC = () => {\r\n  const { movies } = useSelector(getNominations);\r\n\r\n  const { previousNominations } = getStoredNominations(); //Get previously stored nominations\r\n\r\n  //Use either previously stored nominations or new ones\r\n  const nominations =\r\n    previousNominations.length !== 0\r\n      ? previousNominations\r\n      : Object.values(movies);\r\n\r\n  return (\r\n    <div\r\n      role=\"banner\"\r\n      data-banner={nominations.length === 5 ? \"open\" : \"closed\"}\r\n    >\r\n      <p>All done! You have successfully made your five nominations</p>\r\n    </div>\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Nominations, Movie } from \"../types\";\r\n\r\nexport const initialState: Nominations = {\r\n  id: [],\r\n  movies: {},\r\n};\r\n\r\nconst nominations = createSlice({\r\n  name: \"nominations\",\r\n  initialState,\r\n  reducers: {\r\n    deleteNomination(state, { payload }: PayloadAction<string>) {\r\n      const filteredIds = state.id.filter((id) => id !== payload);\r\n      state.id = filteredIds;\r\n\r\n      const { [payload]: selectedItem, ...otherMovies } = state.movies;\r\n      state.movies = otherMovies;\r\n    },\r\n    addNomination(state, { payload }: PayloadAction<Movie>) {\r\n      state.id.push(payload.imdbID);\r\n\r\n      state.movies[payload.imdbID] = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { deleteNomination, addNomination } = nominations.actions;\r\n\r\nexport default nominations.reducer;\r\n","import React, { useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getNominations } from \"../selectors\";\r\nimport { deleteNomination } from \"../slices/nominationsSlice\";\r\nimport { Movie } from \"../types\";\r\nimport { getStoredNominations } from \"../utils\";\r\n\r\nexport const Nominations: React.FC = () => {\r\n  const { movies } = useSelector(getNominations);\r\n\r\n  const { previousNominations } = getStoredNominations(); //Get previously stored nominations\r\n\r\n  //Use either previously stored nominations or new ones\r\n  const nominations =\r\n    previousNominations.length !== 0\r\n      ? previousNominations\r\n      : Object.values(movies);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const liveRegion = useRef<string>(\"\"); //For accessiblity - used to store changes to live region\r\n\r\n  const handleRemove = (id: string) => {\r\n    dispatch(deleteNomination(id));\r\n\r\n    window.localStorage.removeItem(id); //Remove nomination to local storage\r\n\r\n    liveRegion.current = `removed ${\r\n      previousNominations[previousNominations.length - 1].Title\r\n    } from nominations`; //Store nominations to be announced\r\n  };\r\n\r\n  return (\r\n    <aside aria-label=\"nominations\">\r\n      {nominations.length !== 0 && <h2>Nominations</h2>}\r\n\r\n      <div className=\"empty-state\">\r\n        <p>\r\n          <strong>Your nominations appear here.</strong> <br />\r\n          <span>Nominations are saved even after leaving the browser</span>\r\n        </p>\r\n      </div>\r\n\r\n      <ul>\r\n        {nominations.map((movie: Movie) => (\r\n          /*<li key={movie.imdbID}>\r\n            <p className=\"text\">\r\n              {movie.Title} ({movie.Year.slice(0, 4)})\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              aria-label={`Delete ${movie.Title}`}\r\n              onClick={() => handleRemove(movie.imdbID)}\r\n            >\r\n              <span aria-hidden=\"true\">Remove</span>\r\n              <span className=\"vh\">Remove {`${movie.Title}`}</span>\r\n            </button>\r\n          </li>*/\r\n          <p>Test</p>\r\n        ))}\r\n      </ul>\r\n\r\n      <div role=\"status\" aria-live=\"polite\" className=\"vh\">\r\n        {liveRegion.current}\r\n      </div>\r\n    </aside>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst apikey = process.env.REACT_APP_API_KEY;\r\n\r\nexport const searchMovies = async (movieTitle: string, page: number) => {\r\n  const requestURL = `https://www.omdbapi.com/?s=${movieTitle}&page=${page}&apikey=${apikey}`;\r\n\r\n  try {\r\n    const searchResults = await axios.get(requestURL);\r\n\r\n    const { Search, totalResults } = searchResults.data;\r\n\r\n    return { Search, totalResults };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getMovieDetails = async (movieId: string) => {\r\n  const requestURL = `https://www.omdbapi.com/?i=${movieId}&apikey=${apikey}`;\r\n\r\n  const searchResults = await axios.get(requestURL);\r\n\r\n  const response = searchResults.data;\r\n\r\n  return response;\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { searchMovies, getMovieDetails } from \"../api/omdbApi\";\r\nimport { Search, Movie, AppThunk, MovieDetails } from \"../types\";\r\n\r\nexport const initialState: Search = {\r\n  totalResults: \"\",\r\n  searchedInput: \"\",\r\n  id: [],\r\n  movies: {},\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst search = createSlice({\r\n  name: \"search\",\r\n  initialState,\r\n  reducers: {\r\n    setSearchedInput(state, { payload }: PayloadAction<string>) {\r\n      state.searchedInput = payload;\r\n    },\r\n\r\n    searchMoviesStart(state) {\r\n      //Clear previous search results\r\n      state.id = [];\r\n      state.movies = {};\r\n      state.loading = true;\r\n      state.error = null;\r\n    },\r\n\r\n    searchMoviesSuccess(\r\n      state,\r\n      { payload }: PayloadAction<{ Search: Array<Movie>; totalResults: string }>\r\n    ) {\r\n      payload.Search.forEach((movie) => {\r\n        const { imdbID } = movie;\r\n\r\n        state.id.push(imdbID);\r\n        state.movies[imdbID] = movie;\r\n      });\r\n\r\n      state.totalResults = payload.totalResults;\r\n\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n\r\n    searchMoviesFailure(state, { payload }: PayloadAction<string>) {\r\n      state.error = payload;\r\n      state.loading = false;\r\n    },\r\n\r\n    setMovieDetails(state, { payload }: PayloadAction<MovieDetails>) {\r\n      const selectedMovie = state.movies[payload.imdbID];\r\n      selectedMovie.Detail = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  searchMoviesStart,\r\n  searchMoviesSuccess,\r\n  searchMoviesFailure,\r\n  setSearchedInput,\r\n  setMovieDetails,\r\n} = search.actions;\r\n\r\nexport default search.reducer;\r\n\r\n//Redux Thunk\r\nexport const fetchMovies = (\r\n  movieTitle: string,\r\n  page: number = 1\r\n): AppThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(searchMoviesStart());\r\n\r\n    const movies = await searchMovies(movieTitle, page);\r\n\r\n    dispatch(searchMoviesSuccess(movies));\r\n  } catch (error) {\r\n    dispatch(searchMoviesFailure(error.message));\r\n  }\r\n};\r\n\r\nexport const fetchMovieDetails = (movieId: string): AppThunk => async (\r\n  dispatch\r\n) => {\r\n  const details = await getMovieDetails(movieId);\r\n\r\n  dispatch(setMovieDetails(details));\r\n};\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport debounce from \"lodash.debounce\";\r\n\r\nimport { fetchMovies, setSearchedInput } from \"../slices/SearchSlice\";\r\n\r\nexport const Header: React.FC = () => {\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const debouncedInput = useCallback(\r\n    debounce((nextValue) => {\r\n      dispatch(fetchMovies(nextValue)); //Make API request after 500ms\r\n      dispatch(setSearchedInput(nextValue));\r\n    }, 500),\r\n    [] //Function will be created only once (initial render)\r\n  );\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = event.target.value;\r\n\r\n    setSearchInput(value);\r\n    debouncedInput(value);\r\n  };\r\n\r\n  return (\r\n    <header className=\"headerContainer\">\r\n      <h1>Shoppies</h1>\r\n\r\n      <div className=\"searchInput\">\r\n        <i aria-hidden=\"true\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\">\r\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n            <path d=\"M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"></path>\r\n          </svg>\r\n        </i>\r\n\r\n        <label htmlFor=\"search\" className=\"vh\">\r\n          Enter the title of a movie to search\r\n        </label>\r\n\r\n        <input\r\n          type=\"text\"\r\n          id=\"search\"\r\n          placeholder=\"Enter movie title\"\r\n          value={searchInput}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getSearchedResults } from \"../selectors\";\r\nimport { fetchMovies } from \"../slices/SearchSlice\";\r\n\r\nexport const Pagination: React.FC = () => {\r\n  const { totalResults, searchedInput, error, loading } = useSelector(\r\n    getSearchedResults\r\n  );\r\n\r\n  const [page, setPage] = useState(2);\r\n  const [previousInput, setPreviousInput] = useState(searchedInput);\r\n\r\n  useEffect(() => {\r\n    setPage(2);\r\n    setPreviousInput(searchedInput);\r\n  }, [searchedInput]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const totalPages = Math.floor(Number(totalResults) / 10);\r\n\r\n  const hasNextPage = page <= totalPages;\r\n  const hasPrevPage = page > 2;\r\n\r\n  const handleNext = () => {\r\n    if (!loading) {\r\n      setPage((page) => page + 1);\r\n      dispatch(fetchMovies(previousInput, page));\r\n    }\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    if (!loading) {\r\n      setPage((page) => page - 1);\r\n      dispatch(fetchMovies(previousInput, page - 2));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {searchedInput && !error && (\r\n        <div className=\"pagination\">\r\n          <h3>\r\n            Page {page - 1} of {totalPages < 1 ? 1 : totalPages}\r\n          </h3>\r\n          <button\r\n            type=\"button\"\r\n            onClick={handlePrev}\r\n            aria-label=\"Previous Page\"\r\n            disabled={!hasPrevPage}\r\n          >\r\n            Prev\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleNext}\r\n            aria-label=\"Next Page\"\r\n            disabled={!hasNextPage}\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getSearchedResults } from \"../selectors\";\r\nimport { MovieDetails } from \"../types\";\r\n\r\ninterface ModalProps {\r\n  movieId: string;\r\n  handleModal: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nexport const Modal: React.FC<ModalProps> = ({ movieId, handleModal }) => {\r\n  const { movies } = useSelector(getSearchedResults);\r\n\r\n  const selectedMovie = movies[movieId]?.Detail;\r\n\r\n  return (\r\n    <div data-modal={movieId ? \"show\" : \"hide\"} tabIndex={-1}>\r\n      {selectedMovie ? <ModalText {...selectedMovie} /> : <h2>Loading...</h2>}\r\n\r\n      <button\r\n        type=\"button\"\r\n        aria-label=\"close modal\"\r\n        onClick={() => handleModal(\"\")}\r\n      >\r\n        close\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ModalText: React.FC<MovieDetails> = ({\r\n  Actors,\r\n  imdbRating,\r\n  Genre,\r\n  Poster,\r\n  Plot,\r\n  Title,\r\n  Year,\r\n  Released,\r\n}) => {\r\n  return (\r\n    <div className=\"modal-text\">\r\n      <div className=\"modal-header\">\r\n        <img src={Poster} alt={Title} />\r\n        <div>\r\n          <h3>\r\n            {Title} ({Year}) <span className=\"rating\">{imdbRating}</span>\r\n          </h3>\r\n          <p>\r\n            <span>Released:</span> {Released}\r\n          </p>\r\n          <p>\r\n            <span>Genre:</span> {Genre}\r\n          </p>\r\n\r\n          <p>\r\n            <span>Cast:</span> {Actors}\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <h4>Synopsis</h4>\r\n        <p>{Plot}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getSearchedResults, getNominations } from \"../selectors\";\r\nimport { Movie } from \"../types\";\r\nimport { addNomination } from \"../slices/nominationsSlice\";\r\nimport { fetchMovieDetails } from \"../slices/SearchSlice\";\r\nimport { getStoredNominations } from \"../utils\";\r\nimport { Pagination } from \"./Pagination\";\r\nimport { Modal } from \"./Modal\";\r\n\r\nexport const SearchResults: React.FC = () => {\r\n  const [showModal, setShowModal] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (showModal) {\r\n      document.querySelector(\"body\")?.setAttribute(\"data-modal-open\", \"\");\r\n    }\r\n\r\n    return () => {\r\n      document.querySelector(\"body\")?.removeAttribute(\"data-modal-open\");\r\n    };\r\n  }, [showModal]);\r\n\r\n  const searchResults = useSelector(getSearchedResults);\r\n\r\n  const { movies, loading, searchedInput, error } = searchResults;\r\n\r\n  const { id } = useSelector(getNominations);\r\n\r\n  const { previousNominations, previousIds } = getStoredNominations(); //Get data of previously stored nominations\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const liveRegion = useRef<string>(\"\"); //For accessiblity - used to store changes to live region\r\n\r\n  const handleNominate = (nomination: string) => {\r\n    const nominatedMovie = movies[nomination];\r\n\r\n    if (previousNominations.length < 5) {\r\n      dispatch(addNomination(nominatedMovie));\r\n\r\n      window.localStorage.setItem(nomination, JSON.stringify(nominatedMovie)); //Save nomination to local storage\r\n\r\n      liveRegion.current = `nominated ${nominatedMovie.Title}`; //Store nominations to be announced\r\n    }\r\n  };\r\n\r\n  const handleMovieDetails = (movieId: string) => {\r\n    if (!movies[movieId].Detail) {\r\n      //Only fetch when movie detail doesn't exist\r\n      dispatch(fetchMovieDetails(movieId));\r\n    }\r\n\r\n    setShowModal(movieId);\r\n  };\r\n\r\n  return (\r\n    <section aria-label=\"Search Results\">\r\n      {searchedInput && (\r\n        <h2 data-loading={loading}>\r\n          {sectionHeading(loading, error, searchedInput)}\r\n        </h2>\r\n      )}\r\n\r\n      <div className=\"empty-state\">\r\n        <p>\r\n          Search for a movie to nominate using the search bar. <br />\r\n          <strong>\r\n            Your search results appear here <span aria-hidden=\"true\">↓</span>\r\n          </strong>\r\n        </p>\r\n      </div>\r\n\r\n      <ul>\r\n        {Object.values(movies).map((movie: Movie) => (\r\n          <li key={movie.imdbID}>\r\n            <p className=\"text\">\r\n              {movie.Title} ({movie.Year.slice(0, 4)})\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => handleMovieDetails(movie.imdbID)}\r\n                aria-label={`show details of ${movie.Detail}`}\r\n              >\r\n                <svg\r\n                  width=\"32\"\r\n                  height=\"32\"\r\n                  version=\"1.1\"\r\n                  viewBox=\"0 0 8.4667 8.4667\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                  <g fillRule=\"evenodd\" strokeWidth=\".26458\" fill=\"white\">\r\n                    <ellipse cx=\".82682\" cy=\"4.2522\" rx=\".87407\" ry=\".82682\" />\r\n                    <ellipse cx=\"4.2286\" cy=\"4.2522\" rx=\".87407\" ry=\".82682\" />\r\n                    <ellipse cx=\"7.6304\" cy=\"4.2522\" rx=\".87407\" ry=\".82682\" />\r\n                  </g>\r\n                </svg>\r\n              </button>\r\n            </p>\r\n\r\n            <button\r\n              type=\"button\"\r\n              aria-label={`Nominate ${movie.Title}`}\r\n              onClick={() => handleNominate(movie.imdbID)}\r\n              disabled={previousIds.length === 5}\r\n              data-nominated={previousIds.includes(movie.imdbID)}\r\n            >\r\n              <span aria-hidden=\"true\">\r\n                {previousIds.includes(movie.imdbID) ? \"Nominated\" : \"Nominate\"}\r\n              </span>\r\n              <span className=\"vh\">Nominate {`${movie.Title}`}</span>\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <Modal movieId={showModal} handleModal={setShowModal} />\r\n\r\n      <Pagination />\r\n\r\n      <div role=\"status\" aria-live=\"polite\" className=\"vh\">\r\n        {liveRegion.current}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst sectionHeading = (\r\n  loading: boolean,\r\n  error: string | null,\r\n  searchedInput: string\r\n) => {\r\n  if (loading) {\r\n    return \"Loading...\";\r\n  }\r\n\r\n  if (error && error !== \"Network Error\" && searchedInput) {\r\n    return \"Are you sure this movie exists?\";\r\n  }\r\n\r\n  if (error === \"Network Error\" && searchedInput) {\r\n    return \"Something went wrong\";\r\n  }\r\n\r\n  if (!searchedInput) {\r\n    return null;\r\n  }\r\n\r\n  return `Search Results for \"${searchedInput}\"`;\r\n};\r\n","import React from \"react\";\r\nimport { Banner } from \"./components/Banner\";\r\nimport { Nominations } from \"./components/Nominations\";\r\nimport { Header } from \"./components/Header\";\r\nimport { SearchResults } from \"./components/SearchResults\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n\r\n      <main>\r\n        <Banner />\r\n        <div className=\"content\">\r\n          <SearchResults />\r\n          <Nominations />\r\n        </div>\r\n      </main>\r\n\r\n      <footer>{/*<p>Made with love by Chris</p>*/}</footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport nominationsReducer from \"./nominationsSlice\";\r\nimport searchReducer from \"./SearchSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  nominations: nominationsReducer,\r\n  searchResults: searchReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport * from \"./nominationsSlice\";\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"./slices\";\r\nimport \"./index.css\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}