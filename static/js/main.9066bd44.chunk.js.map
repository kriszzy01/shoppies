{"version":3,"sources":["selectors/index.ts","utils/index.ts","components/Banner.tsx","slices/nominationsSlice.ts","components/Nominations.tsx","api/omdbApi.ts","slices/SearchSlice.ts","components/Searchbar.tsx","components/Pagination.tsx","components/SearchResults.tsx","App.tsx","slices/index.ts","index.tsx"],"names":["getNominations","state","nominations","getSearchedResults","searchResults","getStoredNominations","previousNominations","localStore","window","localStorage","i","length","id","key","nomination","getItem","push","JSON","parse","Banner","movies","useSelector","Object","values","data-banner","createSlice","name","initialState","reducers","deleteNomination","payload","filteredIds","filter","otherMovies","addNomination","imdbID","actions","Nominations","dispatch","useDispatch","liveRegion","useRef","aria-label","className","map","movie","Title","Year","type","onClick","removeItem","current","aria-hidden","role","aria-live","searchMovies","movieTitle","page","a","process","requestURL","axios","get","data","Search","totalResults","search","searchedInput","loading","error","setSearchedInput","searchMoviesStart","searchMoviesSuccess","forEach","searchMoviesFailure","fetchMovies","message","Searchbar","useState","searchInput","setSearchInput","debouncedInput","useCallback","debounce","nextValue","htmlFor","xmlns","height","width","d","fill","placeholder","value","onChange","event","target","Pagination","setPage","previousInput","setPreviousInput","useEffect","hasNextPage","Math","floor","Number","hasPrevPage","disabled","SearchResults","sectionHeading","nominatedMovie","setItem","stringify","handleNominate","includes","App","tabIndex","rootReducer","combineReducers","nominationsReducer","searchReducer","store","configureStore","reducer","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.9066bd44.chunk.js","sourcesContent":["import { RootState } from \"../slices\";\r\n\r\n//Nominations Selectors\r\nexport const getNominations = (state: RootState) => state.nominations;\r\n\r\n//Search Results Selectors\r\nexport const getSearchedResults = (state: RootState) => state.searchResults;\r\n","import { Movie } from \"../types\";\r\n\r\nexport const getStoredNominations = () => {\r\n  const previousNominations: Array<Movie> = [];\r\n\r\n  const localStore = window.localStorage;\r\n\r\n  for (let i = 0; i <= localStore.length - 1; i++) {\r\n    let id = \"\";\r\n\r\n    if (localStore.length !== 0) {\r\n      id = localStore.key(i) as string;\r\n    }\r\n\r\n    let nomination = localStore.getItem(id);\r\n\r\n    if (nomination) {\r\n      previousNominations.push(JSON.parse(nomination));\r\n    }\r\n  }\r\n\r\n  return previousNominations;\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getNominations } from \"../selectors\";\r\nimport { getStoredNominations } from \"../utils\";\r\n\r\nexport const Banner: React.FC = () => {\r\n  const { movies } = useSelector(getNominations);\r\n\r\n  const previousNominations = getStoredNominations(); //Get previously stored nominations\r\n\r\n  //Use either previously stored nominations or new ones\r\n  const nominations =\r\n    previousNominations.length !== 0\r\n      ? previousNominations\r\n      : Object.values(movies);\r\n\r\n  return (\r\n    <div data-banner={nominations.length === 5 ? \"open\" : \"closed\"}>\r\n      <p>You have successfully made five nominations</p>\r\n    </div>\r\n  );\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Nominations, Movie } from \"../types\";\r\n\r\nconst initialState: Nominations = {\r\n  id: [],\r\n  movies: {},\r\n};\r\n\r\nconst nominations = createSlice({\r\n  name: \"nominations\",\r\n  initialState,\r\n  reducers: {\r\n    deleteNomination(state, { payload }: PayloadAction<string>) {\r\n      const filteredIds = state.id.filter((id) => id !== payload);\r\n      state.id = filteredIds;\r\n\r\n      const { [payload]: selectedItem, ...otherMovies } = state.movies;\r\n      state.movies = otherMovies;\r\n    },\r\n    addNomination(state, { payload }: PayloadAction<Movie>) {\r\n      state.id.push(payload.imdbID);\r\n\r\n      state.movies[payload.imdbID] = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { deleteNomination, addNomination } = nominations.actions;\r\n\r\nexport default nominations.reducer;\r\n","import React, { useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getNominations } from \"../selectors\";\r\nimport { deleteNomination } from \"../slices/nominationsSlice\";\r\nimport { Movie } from \"../types\";\r\nimport { getStoredNominations } from \"../utils\";\r\n\r\nexport const Nominations: React.FC = () => {\r\n  const { movies } = useSelector(getNominations);\r\n\r\n  const previousNominations = getStoredNominations(); //Get previously stored nominations\r\n\r\n  //Use either previously stored nominations or new ones\r\n  const nominations =\r\n    previousNominations.length !== 0\r\n      ? previousNominations\r\n      : Object.values(movies);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const liveRegion = useRef<string>(\"\"); //For accessiblity - used to store changes to live region\r\n\r\n  const handleRemove = (id: string) => {\r\n    dispatch(deleteNomination(id));\r\n\r\n    window.localStorage.removeItem(id); //Remove nomination to local storage\r\n\r\n    liveRegion.current = `removed ${movies[id].Title} from nominations`; //Store nominations to be announced\r\n  };\r\n\r\n  return (\r\n    <aside aria-label=\"nominations\">\r\n      {nominations.length !== 0 && <h2>Nominations</h2>}\r\n\r\n      <div className=\"empty-state\">\r\n        <p>\r\n          <strong>Your nominations appear here.</strong> <br />\r\n          <span>Nominations are saved even after leaving the browser</span>\r\n        </p>\r\n      </div>\r\n\r\n      <ul>\r\n        {nominations.map((movie: Movie) => (\r\n          <li key={movie.imdbID}>\r\n            <p className=\"text\">\r\n              {movie.Title} ({movie.Year})\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              aria-label={`Delete ${movie.Title}`}\r\n              onClick={() => handleRemove(movie.imdbID)}\r\n            >\r\n              <span aria-hidden=\"true\">Remove</span>\r\n              <span className=\"vh\">Remove {`${movie.Title}`}</span>\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <div role=\"status\" aria-live=\"polite\" className=\"vh\">\r\n        {liveRegion.current}\r\n      </div>\r\n    </aside>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const searchMovies = async (movieTitle: string, page: number) => {\r\n  const apikey = process.env.REACT_APP_API_KEY;\r\n\r\n  const requestURL = `https://www.omdbapi.com/?s=${movieTitle}&page=${page}&apikey=${apikey}`;\r\n\r\n  try {\r\n    const searchResults = await axios.get(requestURL);\r\n\r\n    const { Search, totalResults } = searchResults.data;\r\n\r\n    return { Search, totalResults };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { searchMovies } from \"../api/omdbApi\";\r\nimport { Search, Movie, AppThunk } from \"../types\";\r\n\r\nconst initialState: Search = {\r\n  totalResults: \"\",\r\n  searchedInput: \"\",\r\n  id: [],\r\n  movies: {},\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst search = createSlice({\r\n  name: \"search\",\r\n  initialState,\r\n  reducers: {\r\n    setSearchedInput(state, { payload }: PayloadAction<string>) {\r\n      state.searchedInput = payload;\r\n    },\r\n\r\n    searchMoviesStart(state) {\r\n      //Clear previous search results\r\n      state.id = [];\r\n      state.movies = {};\r\n\r\n      state.totalResults = \"\";\r\n      state.loading = true;\r\n      state.error = null;\r\n    },\r\n\r\n    searchMoviesSuccess(\r\n      state,\r\n      { payload }: PayloadAction<{ Search: Array<Movie>; totalResults: string }>\r\n    ) {\r\n      payload.Search.forEach((movie) => {\r\n        const { imdbID } = movie;\r\n\r\n        state.id.push(imdbID);\r\n        state.movies[imdbID] = movie;\r\n      });\r\n\r\n      state.totalResults = payload.totalResults;\r\n\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n\r\n    searchMoviesFailure(state, { payload }: PayloadAction<string>) {\r\n      state.error = payload;\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  searchMoviesStart,\r\n  searchMoviesSuccess,\r\n  searchMoviesFailure,\r\n  setSearchedInput,\r\n} = search.actions;\r\n\r\nexport default search.reducer;\r\n\r\n//Redux Thunk\r\nexport const fetchMovies = (\r\n  movieTitle: string,\r\n  page: number = 1\r\n): AppThunk => async (dispatch) => {\r\n  try {\r\n    dispatch(searchMoviesStart());\r\n\r\n    const movies = await searchMovies(movieTitle, page);\r\n\r\n    dispatch(searchMoviesSuccess(movies));\r\n  } catch (error) {\r\n    dispatch(searchMoviesFailure(error.message));\r\n  }\r\n};\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport debounce from \"lodash.debounce\";\r\n\r\nimport { fetchMovies, setSearchedInput } from \"../slices/SearchSlice\";\r\n\r\nexport const Searchbar: React.FC = () => {\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const debouncedInput = useCallback(\r\n    debounce((nextValue) => {\r\n      dispatch(fetchMovies(nextValue)); //Make API request after 500ms\r\n      dispatch(setSearchedInput(nextValue));\r\n    }, 500),\r\n    [] //Function will be created only once (initial render)\r\n  );\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = event.target.value;\r\n\r\n    setSearchInput(value);\r\n    debouncedInput(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"searchContainer\">\r\n      <label htmlFor=\"search\" className=\"vh\">\r\n        Enter the title of a movie to search\r\n      </label>\r\n\r\n      <p aria-hidden>Movie Title</p>\r\n\r\n      <div className=\"searchInput\">\r\n        <i aria-hidden=\"true\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" width=\"24\">\r\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n            <path d=\"M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"></path>\r\n          </svg>\r\n        </i>\r\n\r\n        <input\r\n          type=\"text\"\r\n          id=\"search\"\r\n          placeholder=\"Enter movie title\"\r\n          value={searchInput}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getSearchedResults } from \"../selectors\";\r\nimport { fetchMovies } from \"../slices/SearchSlice\";\r\n\r\nexport const Pagination: React.FC = () => {\r\n  const { totalResults, id, searchedInput } = useSelector(getSearchedResults);\r\n\r\n  const [page, setPage] = useState(2);\r\n  const [previousInput, setPreviousInput] = useState(searchedInput);\r\n\r\n  useEffect(() => {\r\n    setPage(2);\r\n    setPreviousInput(searchedInput);\r\n  }, [searchedInput]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const hasNextPage = page < Math.floor(Number(totalResults) / 10);\r\n  const hasPrevPage = page > 2;\r\n\r\n  const handleNext = () => {\r\n    setPage((page) => page + 1);\r\n    dispatch(fetchMovies(previousInput, page));\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    setPage((page) => page - 1);\r\n    dispatch(fetchMovies(previousInput, page-2));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {id.length !== 0 && (\r\n        <div className=\"pagination\">\r\n          <button type=\"button\" onClick={handlePrev} aria-label=\"Previous Page\" disabled={!hasPrevPage}>\r\n            Prev\r\n          </button>\r\n\r\n          <button type=\"button\" onClick={handleNext} aria-label=\"Next Page\" disabled={!hasNextPage}>\r\n            Next\r\n          </button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getSearchedResults, getNominations } from \"../selectors\";\r\nimport { Movie } from \"../types\";\r\nimport { addNomination } from \"../slices/nominationsSlice\";\r\nimport { getStoredNominations } from \"../utils\";\r\nimport { Pagination } from \"./Pagination\";\r\n\r\nexport const SearchResults: React.FC = () => {\r\n  const searchResults = useSelector(getSearchedResults);\r\n\r\n  const { movies, loading, searchedInput, error } = searchResults;\r\n\r\n  const { id } = useSelector(getNominations);\r\n\r\n  const previousNominations = getStoredNominations(); //Get previously stored nominations\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const liveRegion = useRef<string>(\"\"); //For accessiblity - used to store changes to live region\r\n\r\n  const handleNominate = (nomination: string) => {\r\n    const nominatedMovie = movies[nomination];\r\n\r\n    if (previousNominations.length < 5) {\r\n      dispatch(addNomination(nominatedMovie));\r\n\r\n      window.localStorage.setItem(nomination, JSON.stringify(nominatedMovie)); //Save nomination to local storage\r\n\r\n      liveRegion.current = `nominated ${nominatedMovie.Title}`; //Store nominations to be announced\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section aria-label=\"Search Results\">\r\n      <Pagination />\r\n      {searchedInput && (\r\n        <h2>{sectionHeading(loading, error, searchedInput)}</h2>\r\n      )}\r\n\r\n      <div className=\"empty-state\">\r\n        <p>\r\n          Search for a movie to nominate using the search bar. <br />\r\n          <strong>\r\n            Your search results appear here <span aria-hidden=\"true\">↓</span>\r\n          </strong>\r\n        </p>\r\n      </div>\r\n\r\n      <ul>\r\n        {Object.values(movies).map((movie: Movie) => (\r\n          <li key={movie.imdbID}>\r\n            <p className=\"text\">\r\n              {movie.Title} ({movie.Year})\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              aria-label={`Nominate ${movie.Title}`}\r\n              onClick={() => handleNominate(movie.imdbID)}\r\n              disabled={id.includes(movie.imdbID)}\r\n            >\r\n              <span aria-hidden=\"true\">Nominate</span>\r\n              <span className=\"vh\">Nominate {`${movie.Title}`}</span>\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <div role=\"status\" aria-live=\"polite\" className=\"vh\">\r\n        {liveRegion.current}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst sectionHeading = (\r\n  loading: boolean,\r\n  error: string | null,\r\n  searchedInput: string\r\n) => {\r\n  if (loading) {\r\n    return \"Loading...\";\r\n  }\r\n\r\n  if (error && error !== \"Network Error\" && searchedInput) {\r\n    return \"Are you sure this movie exists?\";\r\n  }\r\n\r\n  if (error === \"Network Error\" && searchedInput) {\r\n    return \"Something went wrong\";\r\n  }\r\n\r\n  if (!searchedInput) {\r\n    return null;\r\n  }\r\n\r\n  return `Search Results for \"${searchedInput}\"`;\r\n};\r\n","import React from \"react\";\r\nimport { Banner } from \"./components/Banner\";\r\nimport { Nominations } from \"./components/Nominations\";\r\nimport { Searchbar } from \"./components/Searchbar\";\r\nimport { SearchResults } from \"./components/SearchResults\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <header>\r\n        <h1 tabIndex={-1}>The Shoppies</h1>\r\n        <Searchbar />\r\n      </header>\r\n\r\n      <main>\r\n        <Banner />\r\n        <div className=\"content\">\r\n          <SearchResults />\r\n          <Nominations />\r\n        </div>\r\n      </main>\r\n\r\n      <footer>{/*<p>Made with love by Chris</p>*/}</footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport nominationsReducer from \"./nominationsSlice\";\r\nimport searchReducer from \"./SearchSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  nominations: nominationsReducer,\r\n  searchResults: searchReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport * from \"./nominationsSlice\";\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"./slices\";\r\nimport \"./index.css\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}